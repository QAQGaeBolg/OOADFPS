//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Resources/Actions/VRInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRInput"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""8496f42f-077d-4850-b0a2-a13e96056c73"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8785dd17-c3a6-4fa7-9b2d-5029a67589b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1d2bfeeb-cfa4-42c0-88cb-4e512730db0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiniMap"",
                    ""type"": ""Button"",
                    ""id"": ""3a29f90c-9ede-471f-a74d-7e72a39c72c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Setting"",
                    ""type"": ""Button"",
                    ""id"": ""1b75493a-375b-4415-bfe6-bf2d1e620f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""1cd570f5-f32d-4301-884b-1b93e7d1d297"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftShoot"",
                    ""type"": ""Button"",
                    ""id"": ""92df5499-99b4-4db0-bad6-f5f571141fdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightShoot"",
                    ""type"": ""Button"",
                    ""id"": ""5c6b06d2-da33-4115-bdca-c95bcaebb407"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftGrap"",
                    ""type"": ""Button"",
                    ""id"": ""68476a80-8ff9-47c0-9a40-07b506a183f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGrap"",
                    ""type"": ""Button"",
                    ""id"": ""106b3a53-2736-48e2-a822-c799a602e6e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c561d31-c96f-418a-a9f2-58789ca56034"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""371025cc-e3b9-4038-9fdc-938c3e372944"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f4f67bb-4407-43d3-80c2-7dbce1ed31ce"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5c6b211-857e-4a83-adfd-85a50162a369"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MiniMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""785ad1d5-f3b6-43d8-bd20-000e7a9cb762"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d7bb7b-a5cc-43b9-89a1-8c629ae166ab"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""369a8a64-15d0-4dac-95c6-fa0157fc2a76"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5969799a-be8e-4be3-b2ec-13aa2a7d8751"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Setting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99cdc74a-30c6-4358-9470-cfaff49766dd"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
        m_GamePlay_Jump = m_GamePlay.FindAction("Jump", throwIfNotFound: true);
        m_GamePlay_MiniMap = m_GamePlay.FindAction("MiniMap", throwIfNotFound: true);
        m_GamePlay_Setting = m_GamePlay.FindAction("Setting", throwIfNotFound: true);
        m_GamePlay_Menu = m_GamePlay.FindAction("Menu", throwIfNotFound: true);
        m_GamePlay_LeftShoot = m_GamePlay.FindAction("LeftShoot", throwIfNotFound: true);
        m_GamePlay_RightShoot = m_GamePlay.FindAction("RightShoot", throwIfNotFound: true);
        m_GamePlay_LeftGrap = m_GamePlay.FindAction("LeftGrap", throwIfNotFound: true);
        m_GamePlay_RightGrap = m_GamePlay.FindAction("RightGrap", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Move;
    private readonly InputAction m_GamePlay_Jump;
    private readonly InputAction m_GamePlay_MiniMap;
    private readonly InputAction m_GamePlay_Setting;
    private readonly InputAction m_GamePlay_Menu;
    private readonly InputAction m_GamePlay_LeftShoot;
    private readonly InputAction m_GamePlay_RightShoot;
    private readonly InputAction m_GamePlay_LeftGrap;
    private readonly InputAction m_GamePlay_RightGrap;
    public struct GamePlayActions
    {
        private @VRInput m_Wrapper;
        public GamePlayActions(@VRInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        public InputAction @Jump => m_Wrapper.m_GamePlay_Jump;
        public InputAction @MiniMap => m_Wrapper.m_GamePlay_MiniMap;
        public InputAction @Setting => m_Wrapper.m_GamePlay_Setting;
        public InputAction @Menu => m_Wrapper.m_GamePlay_Menu;
        public InputAction @LeftShoot => m_Wrapper.m_GamePlay_LeftShoot;
        public InputAction @RightShoot => m_Wrapper.m_GamePlay_RightShoot;
        public InputAction @LeftGrap => m_Wrapper.m_GamePlay_LeftGrap;
        public InputAction @RightGrap => m_Wrapper.m_GamePlay_RightGrap;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnJump;
                @MiniMap.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMiniMap;
                @MiniMap.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMiniMap;
                @MiniMap.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMiniMap;
                @Setting.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSetting;
                @Setting.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSetting;
                @Setting.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSetting;
                @Menu.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMenu;
                @LeftShoot.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftShoot;
                @LeftShoot.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftShoot;
                @LeftShoot.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftShoot;
                @RightShoot.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightShoot;
                @RightShoot.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightShoot;
                @RightShoot.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightShoot;
                @LeftGrap.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftGrap;
                @LeftGrap.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftGrap;
                @LeftGrap.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnLeftGrap;
                @RightGrap.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightGrap;
                @RightGrap.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightGrap;
                @RightGrap.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRightGrap;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @MiniMap.started += instance.OnMiniMap;
                @MiniMap.performed += instance.OnMiniMap;
                @MiniMap.canceled += instance.OnMiniMap;
                @Setting.started += instance.OnSetting;
                @Setting.performed += instance.OnSetting;
                @Setting.canceled += instance.OnSetting;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @LeftShoot.started += instance.OnLeftShoot;
                @LeftShoot.performed += instance.OnLeftShoot;
                @LeftShoot.canceled += instance.OnLeftShoot;
                @RightShoot.started += instance.OnRightShoot;
                @RightShoot.performed += instance.OnRightShoot;
                @RightShoot.canceled += instance.OnRightShoot;
                @LeftGrap.started += instance.OnLeftGrap;
                @LeftGrap.performed += instance.OnLeftGrap;
                @LeftGrap.canceled += instance.OnLeftGrap;
                @RightGrap.started += instance.OnRightGrap;
                @RightGrap.performed += instance.OnRightGrap;
                @RightGrap.canceled += instance.OnRightGrap;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    public interface IGamePlayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMiniMap(InputAction.CallbackContext context);
        void OnSetting(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnLeftShoot(InputAction.CallbackContext context);
        void OnRightShoot(InputAction.CallbackContext context);
        void OnLeftGrap(InputAction.CallbackContext context);
        void OnRightGrap(InputAction.CallbackContext context);
    }
}
